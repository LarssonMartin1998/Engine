Texture2D shaderTexture;
SamplerState sampleType;

cbuffer LightBuffer
{
	float4 ambientColor;
	float4 diffuseColor;
	float3 lightDirection;
	float specularPower;
	float4 specularColor;
};

struct PixelInput
{
	float4 position : SV_POSITION;
	float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
	float4 viewDirection : TEXCOORD01;
};

float4 SpecularPixelShader(PixelInput input) : SV_TARGET
{
	float4 color = ambientColor;
	float4 specular = float4(0.0, 0.0, 0.0, 0.0);
	float4 textureColor = shaderTexture.Sample(sampleType, input.tex);
	float3 lightDir = -lightDirection;

	float lightIntensity = saturate(dot(input.normal, lightDir));
	if (lightIntensity > 0.0)
	{
		color += diffuseColor * lightIntensity;
		color = saturate(color);

		float3 reflection = normalize(2 * lightIntensity * input.normal - lightDir);
		specular = pow(saturate(dot(reflection, input.viewDirection)), specularPower);
	}

	color = saturate(color);

	color = color * textureColor;
	color = saturate(color + specular);

	return color;
}
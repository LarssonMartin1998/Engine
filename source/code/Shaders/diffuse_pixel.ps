Texture2D shaderTexture;
SamplerState sampleType;

cbuffer LightBuffer
{
	float4 diffuseColor;
	float4 lightDirection;
	float pad01;
};

struct PixelInput
{
	float4 position : SV_POSITION;
	float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
};

float4 DiffusePixelShader(PixelInput input) : SV_TARGET
{
	float4 textureColor = shaderTexture.Sample(sampleType, input.tex);

	// Calculate the amount of light on this pixel, saturate clamps the dot value between 0 and 1.
	float lightIntensity = saturate(dot(float4(input.normal, 1.0), -lightDirection));
	float ambientLightIntensity = 0.05;

	// Determine how much the pixel with be lightened up by the light color.
	float4 directionalColor = saturate(diffuseColor * lightIntensity);
	float4 ambientColor = saturate(diffuseColor * ambientLightIntensity);

	// Multiply the texture pixel and the final diffuse color to get the final pixel color result.
	float4 finalColor = saturate(ambientColor + directionalColor) * textureColor;

	return finalColor;
}